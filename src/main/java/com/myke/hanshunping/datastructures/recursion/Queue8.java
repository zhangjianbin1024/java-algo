package com.myke.hanshunping.datastructures.recursion;

/**
 * 8皇后是回溯的经典算法
 */
public class Queue8 {

    //定义一个max表示共有多少个皇后
    int max = 8;
    //定义数组array, 保存皇后放置位置的结果,比如 arr = {0 , 4, 7, 5, 2, 6, 1, 3}
    // arr[i] 的值代表列，则 i 代表行
    // arr[i]=val : val 表示第 i + 1 个皇后，放在 第 i + 1 行的第 val + 1 列

    int[] array = new int[max];
    static int count = 0;
    static int judgeCount = 0;

    public static void main(String[] args) {
        //测试一把 ， 8皇后是否正确
        Queue8 queue8 = new Queue8();
        queue8.check(0);
        System.out.printf("一共有%d解法", count);
        System.out.printf("一共判断冲突的次数%d次", judgeCount); // 1.5w

    }


    //编写一个方法，放置第n个皇后
    //特别注意： check 是 每一次递归时，进入到check中都有  for(int i = 0; i < max; i++)，因此会有回溯
    // 回溯:先将n从第一行第一列开始，当走到最后一行后并找到解后,再将n从第一行第二列开始，依次到最后一行，
    // 当第一行的所有解都得到时，再从第二行开始求解
    // 回溯也就是 check(n + 1); n 的下一行通过 for 循环实现从第1列到最后一列并判断位置是否与n新的位置是否冲突并得到新的解
    private void check(int n) {
        if (n == max) {  //n = 8 , 其实8个皇后就既然放好
            print();
            return;
        }

        //依次放入皇后，并判断是否冲突
        for (int i = 0; i < max; i++) {//i代表列,通过 i 不断的向后移一列看是否冲突
            //先把当前这个皇后 n （n也代表第几行）, 放到该行的第1列，先从第一列开始依次往后移
            array[n] = i;
            //判断当放置第n个皇后到i列时，是否冲突
            if (judge(n)) { // 不冲突
                //接着放n+1（也就是下一行）个皇后,即开始递归
                check(n + 1); //回溯
            }
            //如果冲突，就继续执行 array[n] = i; 即将第n个皇后，放置在本行并后移的一个位置，也就是 i 列的变化
        }
    }

    //查看当我们放置第n个皇后, 就去检测该皇后是否和前面已经摆放的皇后冲突

    /**
     * 判断皇后的位置是否冲突
     *
     * @param n 表示第n个皇后，
     * @return
     */
    private boolean judge(int n) {
        judgeCount++;
        for (int i = 0; i < n; i++) {
            // 说明
            //1. array[i] == array[n]  表示判断 第n个皇后是否和前面的n-1个皇后在同一列
            //2. Math.abs(n-i) == Math.abs(array[n] - array[i]) 表示判断第n个皇后是否和第i皇后是否在同一斜线
            // n = 1 时 放置第 2 列
            // n = 1 时 则array[n] 就是 array[1] = 1
            // Math.abs(1-0) == 1
            // Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1
            //3. 判断是否在同一行, 没有必要，n 也代表行,n 每次都在递增
            if (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i])) {
                return false;
            }
        }
        return true;
    }

    //写一个方法，可以将皇后摆放的位置输出
    private void print() {
        count++;
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

}
